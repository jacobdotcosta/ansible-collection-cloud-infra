---
# This is an example playbook to execute Ansible tests.

- name: Verify
  hosts: localhost
  gather_facts: false

  pre_tasks:
    - name: "Set test facts"
      ansible.builtin.set_fact:
        vm_name: ansible_molecule_snowdrop_openstack_test

    - name: Include default vars
      ansible.builtin.include_vars:
        file: defaults/main.yml
        # name: role_defaults

    - name: List all networks
      openstack.cloud.networks_info:
        auth: "{{ rhos_auth }}"
        auth_type: "{{ rhos_auth_type }}"
      register: rhos_network_list

    - name: "Set openstack VM network fact"
      ansible.builtin.set_fact:
        openstack_vm_network: "{{ rhos_network_list.networks[0].name | default('') }}"
        
  tasks:

    - name: "Get VM information"
      openstack.cloud.server_info:
        auth:
          project_name: "{{ openstack_auth.openstack_project_name }}"
          username: "{{ openstack_auth.openstack_console_user }}"
          password: "{{ openstack_auth.openstack_console_password }}"
          user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
          project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
          auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
        name: "{{ vm_name }}"
      register: openstack_server_info_output

    - name: "Print OpenStack server information"
      ansible.builtin.debug:
        msg: 
          - "openstack_server_info_output: {{ openstack_server_info_output }}"

    - name: "Validate server list"
      ansible.builtin.assert:
        that:
          - openstack_server_info_output.servers | length == 1
        msg: "Openstack must output 1 and only 1 server. The result was {{ openstack_server_info_output.servers | length }} ({{ openstack_server_info_output.servers }}). "

    - name: "Collect host fixed IP v4 address"
      ansible.builtin.set_fact:
        openstack_vm_ipv4_address: "{{ openstack_server_info_output.servers[0].addresses[ openstack_vm_network ] | community.general.json_query(type_n_version_query) }}"
      vars:
        type_n_version_query: "[?\"OS-EXT-IPS:type\" == 'fixed' && version == `4`]"

    - name: "Collect host fixed IP v4 address "
      ansible.builtin.set_fact:
        openstack_vm_ipv4: "{{ openstack_vm_ipv4_address[0].addr }}"

    - name: "Validate server IPV4"
      ansible.builtin.assert:
        that:
          - openstack_vm_ipv4 is defined and openstack_vm_ipv4 | length > 0
        msg: "Openstack server must have an IPV4. "

    - name: "Validate server flavor"
      ansible.builtin.assert:
        that:
          - openstack_server_info_output.servers[0].flavor.name == openstack_vm_flavor
        msg: "Server flavor must be the one requested. Obtained {{ openstack_server_info_output.servers[0].flavor.name }} but requested {{ openstack_vm_flavor }}."

    - name: "Validate server key"
      ansible.builtin.assert:
        that:
          - openstack_server_info_output.servers[0].key_name == vm_name
        msg: "Server key must be the one requested. Obtained {{ openstack_server_info_output.servers[0].key_name }} but requested {{ vm_name }}."
...
